#
# CircleCI 2.0 configuration file.
#
# All tasks are located in scripts in `.circleci` directory.
# This is to allow per-project override for a particular job without
# the need to modify this configuration file.
#
# Understanding CircleCI 'docker' executor.
#
# CircleCI uses "runner" container (created from specified Docker image)
# to checkout source code and run commands defined in this file.
# Application Docker containers (the ones defined in docker-compose.yml)
# run on *remote* docker server, started by CircleCI as a part of their stack.
# The "runner" container uses Docker client to control remote Docker server
# (when used locally, Docker bundles both client and server into a single
# "Docker" application, so you may not even know that these are two different
# services).
#
# Because Docker images use layers, it is possible to cache Docker images
# between builds to significantly speedup application provisioning for each
# job (it requires enabling of Docker Layer Caching feature in CircleCI by
# lodging a support request).
# https://circleci.com/docs/2.0/docker-layer-caching/
version: 2
aliases:
  #-----------------------------------------------------------------------------
  # Variables.
  #-----------------------------------------------------------------------------
  # For YAML support of anchors and references, see http://blog.daemonl.com/2016/02/yaml.html

  # SSH key fingerprint to deploy code. Add private key of the user who is
  # allowed to push to $DEPLOY_GIT_REMOTE repo under "SSH Permissions" in
  # CircleCI UI.
  - &deploy_ssh_fingerprint "56:f3:3f:51:c3:8f:b3:75:01:90:6e:26:48:e7:48:e1"

  # Shared configuration applied to each job.
  - &container_config
    #
    # Location of checked-out files within "runner" container.
    working_directory: ~/project
    environment:
      DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
    docker:
      - image: integratedexperts/ci-builder
        environment:
          # How often to refresh the cache of DB dump. Refer to `date` command.
          DB_TIMESTAMP: +%Y_%m_%d
          VOLUMES_MOUNTED: 0
    # Use large resource class for faster builds.
    # Uncomment the line below if your account has this option configured.
    # resource_class: xlarge

  # Step to setup remote docker.
  - &step_setup_remote_docker
      setup_remote_docker
    # Uncomment lines below if your CircleCI plan supports docker layer caching.
    # Docker Layer Caching allows to significantly speed up builds by caching
    # images built during previous runs.
    # @see https://circleci.com/docs/2.0/docker-layer-caching/
    # setup_remote_docker:
    #   docker_layer_caching: true

jobs:
  # Database handling is a first step of the build.
  #
  # $DB_TIMESTAMP is used to determine if a fresh DB dump should be downloaded
  # for the current build. Usually, a daily database dump is sufficient for
  # development activities.
  #
  # Database will be sanitized using standard drush sanitization. You may also
  # use custom SQL script to add more sanitization steps by putting SQL
  # statements into scripts/sanitize.sql file.
  # Set SKIP_SANITIZE_DB variable to '1' to skip sanitization altogether.
  database:
    <<: *container_config
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_setup_remote_docker
      - run:
          name: Set timestamp for database caching
          command: echo "$(date ${DB_TIMESTAMP})" > /tmp/DB_TIMESTAMP && cat /tmp/DB_TIMESTAMP
      - restore_cache:
          keys:
            #
            # https://circleci.com/docs/2.0/caching/#restoring-cache
            #
            # Change 'v1' to 'v2', 'v3' etc., commit and push to force cache reset.
            #
            # Cache based on the branch and timestamp. This will lookup cache
            # Lookup cache based on the current branch and a timestamp. Allows
            # to cache results of the very first build on the day (sanitized
            # database dump, for example) and re-use it in all subsequent builds.
            - v1-db8-{{ .Branch }}-{{ checksum "/tmp/DB_TIMESTAMP" }}
            #
            # Fallback to caching by branch name. Allows to use cache from the
            # branch build on the previous day.
            - v1-db8-{{ .Branch }}-
      - run: .circleci/download-db.sh
      - save_cache:
          key: v1-db8-{{ .Branch }}-{{ checksum "/tmp/DB_TIMESTAMP" }}
          paths:
            - .data

  build:
    <<: *container_config
    parallelism: 2
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_setup_remote_docker
      - restore_cache:
          keys:
            #
            # Use cached artifacts from previous builds of this branch ran at
            # any time.
            # https://circleci.com/docs/2.0/caching/#restoring-cache
            - v1-db8-{{ .Branch }}-
      - run: .circleci/build.sh
      - run: .circleci/test.sh
      - run:
          name: Process artifacts
          command: .circleci/process-artifacts.sh
          when: always
      - store_artifacts:
          path: /tmp/artifacts
          when: always
      #
      # Persisting previously built application code artifact (without
      # development dependencies) to use it in deployment job.
      - persist_to_workspace:
          root: /workspace
          paths:
            - code

  # Deploy primary branches.
  deploy: &job_deploy
    <<: *container_config
    steps:
      #
      # Workspace now contains previously built application code artifact.
      - attach_workspace:
          at: /workspace
      #
      # Add SSH key into "runner" container to have "push" access to remote
      # repository.
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - run:
          #
          # https://github.com/integratedexperts/robo-git-artefact
          command: .circleci/deploy.sh
          no_output_timeout: 30m
      - store_artifacts:
          path: /tmp/artifacts

  # Deploy tags.
  deploy_tags: &job_deploy_tags
    <<: *container_config
    steps:
      #
      # Workspace now contains previously built application code artifact.
      - attach_workspace:
          at: /workspace
      #
      # Add SSH key into "runner" container to have "push" access to remote
      # repository.
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - run:
          #
          # Override deployment branch to contain tags in the branch name.
          # https://github.com/integratedexperts/robo-git-artefact
          command: DEPLOY_GIT_BRANCH="deployment/[tags:-]" .circleci/deploy.sh
          no_output_timeout: 30m
      - store_artifacts:
          path: /tmp/artifacts

workflows:
  version: 2
  main:
    jobs:
      - database:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - database
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              # Allowed branches:
              # - master, develop, ci, cisomething
              # - release/123, release/123.456, release/123.456.789, release/123.456.789-rc123
              # - hotfix/123, hotfix/123.456, hotfix/123.456.789
              # - feature/description, feature/123-description, but not feature/8.x-description or feature/7.x-description
              only: /master|develop|ci.*|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|feature\/(?!7.x-|8.x-)[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      - deploy_tags:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # Allowed tags: 1, 123, 123.456, 123.456.789, 123.456.789-rc123
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)?$/

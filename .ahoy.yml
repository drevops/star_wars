#
# Ahoy configuration file.
# http://www.ahoycli.com/
#
# Provides development experience shortcuts to work with the stack.
# Any command can be copy-pasted directly into terminal and ran without using
# Ahoy.
#
# Do not add values directly into this file. Use .env file instead.
# Run `ahoy up cli` to apply environment variables changes to containers.
---
ahoyapi: v2

commands:

  build:
    usage: Build or rebuild the project.
    cmd: ./scripts/drevops/build.sh

  info:
    usage: Show information about this project.
    cmd: |
      docker-compose exec \
        -e HOST_DB_PORT=$(docker port $(docker-compose ps -q mariadb 2>/dev/null) 3306 2>/dev/null | cut -d : -f 2) \
        -e HOST_SOLR_PORT=$(docker port $(docker-compose ps -q solr 2>/dev/null) 8983 2>/dev/null | cut -d : -f 2) \
        -e SHOW_LOGIN_LINK=${SHOW_LOGIN_LINK} \
        cli ./scripts/drevops/info.sh "$@"

  # ----------------------------------------------------------------------------
  # Docker commands.
  # ----------------------------------------------------------------------------

  up:
    usage: Build and start all or specified Docker containers.
    cmd: |
      docker-compose up -d "$@" && if docker-compose logs | grep -q "\[Error\]"; then exit 1; fi
      #  Write Livereload host port information into a socket file.
      mkdir -p docroot/sites/default/files && docker-compose port cli 35729 | cut -d : -f 2 | xargs -I{} ahoy cli 'echo {} > /app/docroot/sites/default/files/livereload.sock'

  down:
    usage: Stop Docker containers and remove container, images, volumes and networks.
    #  Always remove dangling volumes after removing containers to prevent
    #  data data leaking between builds (resulting in inconsistent builds).
    cmd: "if [ -f \"docker-compose.yml\" ]; then docker-compose down --volumes; fi"

  start:
    usage: Start all or specified existing Docker containers.
    cmd: |
      docker-compose start "$@"
      #  Write Livereload host port information into a socket file.
      mkdir -p docroot/sites/default/files && docker-compose port cli 35729 | cut -d : -f 2 | xargs -I{} ahoy cli 'echo {} > /app/docroot/sites/default/files/livereload.sock'

  stop:
    usage: Stop all or specified running Docker containers.
    cmd: docker-compose stop "$@"

  restart:
    usage: Restart all or specified stopped and running Docker containers.
    cmd: docker-compose restart "$@"

  logs:
    usage: Show Docker logs for all or specified services.
    cmd: docker-compose logs "$@"

  pull:
    usage: Pull latest docker images.
    cmd: if [ ! -z "$(docker image ls -q)" ]; then docker image ls --format \"{{.Repository}}:{{.Tag}}\" | grep amazeeio/ | grep -v none | xargs -n1 docker pull | cat; fi

  cli:
    usage: Start a shell or run a command inside the CLI service container.
    # The shell is started if no arguments were provided to this command.
    cmd: if \[ "${#}" -ne 0 \]; then docker-compose exec -T cli bash -c "$*"; else docker-compose exec cli bash; fi

  drush:
    usage: Run drush commands in the CLI service container.
    cmd: docker-compose exec -T cli drush -l ${LOCALDEV_URL} "$@"

  flush-redis:
    usage: Flush Redis cache.
    cmd: docker-compose exec redis redis-cli flushall

  # ----------------------------------------------------------------------------
  # Application commands.
  # ----------------------------------------------------------------------------

  login:
    usage: Login to a website.
    # Unblock user 1 and generate a one time login link.
    cmd: ahoy drush uublk 1 -q && ahoy drush uli "$@"

  download-db:
    usage: Download database.
    cmd: ./scripts/drevops/download-db.sh

  install-site:
    usage: Install a site.
    cmd: docker-compose exec -T cli ./scripts/drevops/drupal-install-site.sh

  export-db:
    usage: Export database dump.
    cmd: docker-compose exec -T cli ./scripts/drevops/drupal-export-db.sh "$@"

  clean:
    usage: Remove containers and all build files.
    cmd: ahoy down && ./scripts/drevops/clean.sh

  reset:
    usage: "Reset environment: remove containers, all build, uncommitted files."
    cmd: |
      ahoy confirm "All containers, build and uncomitted files will be removed, repository will be reset to the last commit. Proceed?" \
      && ahoy clean && ./scripts/drevops/reset.sh || true

  fe:
    usage: Build front-end assets.
    cmd: ahoy cli "cd docroot/themes/custom/star && npm run build"

  fed:
    usage: Build front-end assets for development.
    cmd: ahoy cli "cd docroot/themes/custom/star && npm run build-dev"

  few:
    usage: Watch front-end assets during development.
    cmd: ahoy cli "cd docroot/themes/custom/star && npm run watch"

  export-code:
    usage: Export built code.
    cmd: |
      [ -z "${BUILD_EXPORT_DIR}" ] && exit
      mkdir -p "${BUILD_EXPORT_DIR}" && docker-compose exec --env BUILD_EXPORT_DIR="${BUILD_EXPORT_DIR}" -T cli ./scripts/drevops/export-code.sh
      docker cp -L $(docker-compose ps -q cli):"${BUILD_EXPORT_DIR}"/. ${BUILD_EXPORT_DIR}

  lint:
    usage: Lint back-end and front-end code.
    cmd: ahoy cli ./scripts/drevops/lint.sh "$@"

  lint-be:
    usage: Lint back-end code.
    cmd: ahoy cli ./scripts/drevops/lint.sh be

  lint-fe:
    usage: Lint front-end code.
    cmd: ahoy cli ./scripts/drevops/lint.sh fe

  test:
    usage: Run all tests.
    cmd: ahoy cli ./scripts/drevops/test.sh unit-kernel-functional-bdd

  test-unit:
    usage: Run Simpletest unit tests.
    cmd: ahoy cli ./scripts/drevops/test.sh unit "$@"

  test-kernel:
    usage: Run Simpletest kernel tests.
    cmd: ahoy cli ./scripts/drevops/test.sh kernel "$@"

  test-functional:
    usage: Run Simpletest functional tests.
    cmd: ahoy cli ./scripts/drevops/test.sh functional "$@"

  test-bdd:
    usage: Run BDD tests.
    cmd: ahoy cli "export BEHAT_PROFILE=${BEHAT_PROFILE:-} && ./scripts/drevops/test.sh bdd $@"

  debug:
    usage: Enable debug configuration.
    # Check if the debug configuration is already enabled and, if not -
    # enable it and check again that it is enabled from inside of the container.
    cmd: ahoy cli php -v | grep -q Xdebug || XDEBUG_ENABLE=1 ahoy up cli php && ahoy cli php -v | grep -q Xdebug && echo "Enabled debug confguration. Use 'ahoy up' to disable."

  deploy:
    usage: Run remote deployment procedures
    cmd: |
      ahoy confirm "Deployment usually runs in CI. Are you sure you want to proceed with manual deployment? (Run as DEPLOY_PROCEED=1 ahoy deploy [type1,[type2..]], where [type] is 'code', 'docker', 'webhook')" \
      && ./scripts/drevops/deploy.sh "$@" || true

  doctor:
    usage: Find problems with current project setup.
    cmd: ./scripts/drevops/doctor.sh "$@"

  update:
    usage: Update development stack.
    cmd: ahoy confirm "Some committed files may become overwritten. Proceed?" && ./scripts/drevops/update.sh || true

  # ----------------------------------------------------------------------------
  # Utilities.
  # ----------------------------------------------------------------------------
  confirm:
    cmd: read -r -p "${@} [y/N] " response; [ ${response} = "y" ]
    hide: true

# Override entrypoint to alter default behaviour of Ahoy.
entrypoint:
  # Run all commands in Bash.
  - bash
  # Read the commands from the string.
  - -c
  # Exit the script if any statement returns a non-true return value.
  - -e
  # Read variables from .env file (if exists and not empty)
  # (if exists and not empty).
  #
  # It is important to understand that variables set in .env file are already
  # available inside of the containers after stack is running (as a part of
  # docker-compose functionality), so most of the commands are using these
  # values taken from containers.
  #
  # However, since docker does not support changes to environment variables in
  # running containers without restarting containers, we adding this mechanism
  # of reading variables here to allow adjustments of some variables
  # (like PHPCS scan targets) without the need to restart containers.
  #
  # As a rule of thumb, use `ahoy up cli` to apply changes to variables.
  - |
    [ -f .env ] && [ -s .env ] && export $(grep -v '^#' .env | xargs)
    bash -e -c "$0" "$@"
  # Replaced with your command.
  - '{{cmd}}'
  # The name of the command that was run (available as $0).
  - '{{name}}'
